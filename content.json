{"meta":{"title":"Armin的小屋  O(∩_∩)O~","subtitle":"Armin","description":"A beautiful day has begun again.","author":"Armin","url":"https://armincxh.github.com","root":"/"},"pages":[],"posts":[{"title":"自始至终","slug":"自始至终","date":"2019-08-30T13:38:26.000Z","updated":"2019-08-30T15:02:33.813Z","comments":true,"path":"2019/08/30/自始至终/","link":"","permalink":"https://armincxh.github.com/2019/08/30/自始至终/","excerpt":"","text":"我已经快忘了来这座城市的初衷 我总是没有勇气把生活过的波澜壮阔 2019-7-5，我终于离开了生活和学习了几年的城市，这个城市含着与我记忆无关的繁华，就这么走了也没捎上一句不咸不淡的问候 一个人，一张车票，一个行李箱南下来到了深圳，对，没错，就是一个人。从小到大因该这是第一次离家这么远，据说过年回家还得抢车票。。。 人最可悲的心甘情愿用不知道多少个日夜的交替去执着自己不该执着的事物,然而早已白露不是惊蛰，世间也不存在那壶让人醉生梦死的酒我知道… 你很难找到跟你性情相通的人，你发现你只是一个存在， 又或者在别人眼里根本就看不见你。","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"心之所向","slug":"心之所向","date":"2019-08-30T13:24:38.000Z","updated":"2019-08-30T13:29:44.829Z","comments":true,"path":"2019/08/30/心之所向/","link":"","permalink":"https://armincxh.github.com/2019/08/30/心之所向/","excerpt":"","text":"10年前，2009年，我小学五年级，喜欢数学和科学，我的梦想是做一个科学家。 8年前，2011年，我刚上初二，依旧喜欢并擅长数学和科学，我喜欢幻想。 5年前，2014年，我高二，我已经不擅长数学和物化生，我热衷与看小说，玩游戏，和上课睡觉。 现在，我敲着不知道是什么玩意的东西。 。。。。。 真要问起来，我觉得我是有梦想的，也有想要追求的生活。为什么我的生活会变成这个样子。因为不够认真和努力，总是在小圈子里洋洋自得。 做事要全力以赴，而其前提是认清自己所爱，以及自己的优势与局限所在。缺乏清晰的目标，什么都想抓住，最终容易竹篮打水一场空。 这是我很喜欢的一句话，再次送给自己。 愿我心之所向便是今后的身之所往。","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"自由软件自由社会.PDF","slug":"自由软件自由社会-PDF","date":"2019-08-30T12:30:58.000Z","updated":"2019-08-30T12:32:16.242Z","comments":true,"path":"2019/08/30/自由软件自由社会-PDF/","link":"","permalink":"https://armincxh.github.com/2019/08/30/自由软件自由社会-PDF/","excerpt":"","text":"坚持开放、坚持自由。点击下载自由软件自由社会.pdf","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"如何突破自己的瓶颈？","slug":"如何突破自己的瓶颈？","date":"2019-08-30T12:26:47.000Z","updated":"2019-08-30T12:28:29.176Z","comments":true,"path":"2019/08/30/如何突破自己的瓶颈？/","link":"","permalink":"https://armincxh.github.com/2019/08/30/如何突破自己的瓶颈？/","excerpt":"","text":"The post isn’t finished yet, it will be updated anytime! 以旁观者角度审视自己提要： 勇敢面对自己，正视自己的缺点 客观分析自己的好的、坏的甚至是邪恶的想法，不好的想法切不可影响到他人，需要自我消化 人无完人，对于非理性情绪不要过分压抑，在不影响他人的情况下采取各种积极或消极的方式去释放这些情绪 消极的释放方式所要达到的目的是推翻重建，进入全新的境界，从而从另一个视角看待原来的情绪和行为 理性看待他人的评论、观点和建议，保持就事论事的态度，切忌带有个人情绪，更不要被别人带着走（影响个人情绪、怀疑个人价值观等等）提要： 若无法静心并保持客观，那就禁用评论，不与人争论，专注于自己的思考方向，但需多接触不同观点，及时调整，不可过于执念 开放心态，放下恩怨是非，求同存异 事物的美好在于不同，不同的观点、思想的碰撞才能产生激烈的火花，而消灭差异最终只会沦为「行尸走肉」 「尊重你说话的权利，但也保留我的个人意见」 没有绝对的对错，对错都是相对的，在不同身份、不同环境、不同角度甚至可能发生反转。依据当前已知信息作出相对合理的选择，并在实践过程中不断调整 专注于探索自己的生活方式和方向，不羡慕别人的生活，先过好自己的提要： 时常在朋友圈、新闻、他人口中看到或听到某某光鲜亮丽、幸福美满、事业猛进，而自己依然处于迷茫、混沌、一人吃饱全家不饿的状态，心里倍感失落、感觉就是一loser，进而嫉妒别人，甚而诅咒他人 那你需要静下来分析，如何形成当前局面，自己真正需要的是什么，自己在生活的路上做了什么 别人都在幸福的路上忙碌奔波，而你却有如此闲心去妒嫉别人的生活？ 人人都有自己的活法，也有不同的满足，找到属于自己的，并聚焦于此，为此而忙碌，心无杂念 以“出世”的态度去观察他人和自己，不要觉得自己过得不如意就希望全世界都得与你一起面对种种不如意，从他人的不幸中去寻找优越感，将会使自己越来越失败、愤恨、怀疑自己。不断战胜、超越自己才是正途 始终保持内心的平静，避免外界对自己的诱惑和干扰，要有自己的坚守，纯粹的名与利终究是带不走的 沉下心来专注于自己的事情，朝着自己认为可行的方向前行，也许会失败，但在行进过程中同样也能学到很多东西，所以，不要一开始就因为害怕失败而不去做，先勇敢地去做，快速尝试以快速失败或成功 对所见、所听、所接触的事、物、人，取其精华去其糟泊，吸收有用可取的方式，探索本质，获得处事之道提要： 有些人就是人生路上的“小怪兽”，有些人是良师益友 随时准备两件事情，以避免当前事情完成后不知道该继续做什么的困境准备一份阅读书籍列表，在无所事事时，避免无目的的刷网页，转而看书会更加有益文章作者: flytreeleft 文章链接: https://flytreeleft.org/how-to-break-out-of-your-limit/","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"书单推荐","slug":"信息安全从业者书单推荐","date":"2019-08-30T11:30:59.000Z","updated":"2019-08-30T11:46:19.281Z","comments":true,"path":"2019/08/30/信息安全从业者书单推荐/","link":"","permalink":"https://armincxh.github.com/2019/08/30/信息安全从业者书单推荐/","excerpt":"","text":"信息安全 计算机及系统原理· 《编码：隐匿在计算机软硬件背后的语言》 【美】Charles Petzold · 《深入理解计算机系统》【美】Randal E.Bryant · 《深入理解Windows操作系统》【美】Russinovich,M.E.；Solomon,D.A. · 《Linux内核设计与实现》【美】Robert Love · 《深入理解Android内核设计思想》林学森 · 《Android系统源代码情景分析》罗升阳 · 《深入理解Mac OS X &amp; iOS操作系统》【美】Jonathan Levin · 《深入理解Linux内核》 【美】DanielP.Bovet · 《代码揭秘：从C/C++的角度探秘计算机系统》左飞 · 《Android Dalvik虚拟机结构及机制剖析（第1、2卷）》吴艳霞；张国印 · 《Android Internals::Power User’s View》【美】Jonathan Levin，中文书名《最强Android书：架构大剖析》已上架 编程开发系统平台Windows· 《Windows程序设计》【美】Charles Petzold · 《Windows核心编程》【美】Jeffrey Richter · 《Windows环境下32位汇编语言程序设计》罗云彬 · 《Windows驱动开发技术详解》张帆 Linux/Unix· 《UNIX环境高级编程》【美】W.Richard Stevens；Stephen A.Rago · 《Linux程序设计》【美】Neil Matthew；Richard Stones · 《鸟哥的Linux私房菜》鸟哥 · 《Linux设备驱动程序》【美】Jonathan Corbet；Alessandro Rubini；Gerg Kroah-Hartman macOS/iOS· 《iOS编程》【美】Christian Keur；Aaron Hillegass · 《OS X与iOS内核编程）【澳】Halvorsen,O.H.；Clarke,D Android· 《第一行代码——Android》郭霖 · 《Android编程权威指南》【美】Brian Hardy；BillPhillips 编程语言C· 《C语言程序设计》【美】Brian W.Kernighan；Dennis M.Ritchie · 《C Primer Plus》【美】Stephen Prata，入门书籍 · 《C和指针》【美】Kenneth A.Reek · 《C陷阱与缺陷》【美】Andrew Koenig · 《C专家编程》【美】Peter van der Linden C++· 《C++ Primer Plus》【美】Stephen Prata，入门书籍 · 《C++ Primer》【美】Stanley B.Lippman；Josée Lajoie；Barbara E.Moo，进阶书籍 ASM· 《Intel汇编语言程序设计》【美】Kip Irvine · 《Intel开发手册》 · 《汇编语言（第3版）》王爽 · 《x86汇编语言：从实模式到保护模式》李忠 Java· 《Java核心技术》【美】Cay S.Horstmann；Gary Cornell，入门书籍 · 《Java 编程思想》【美】Bruce eckel，进阶书籍 JavaScript· 《JavaScript DOM编程艺术》【美】Jeremy Keith；【加】Jeffrey Sambells · 《JavaScript高级程序设计》【美】Zakas.Bicholas C. Python· 《Python核心编程（第2版）》【美】Wesley J·Chun Shell· 《Linux Shell脚本攻略》【印】Sarath Lakshman 调试技术· 《软件调试》张银奎 · 《Debug Hacks》【日】吉冈弘隆；大和一洋；大岩尚宏；安部东洋；吉田俊辅 · 《格蠹汇编：软件调试案例锦集》张银奎 数据结构与算法· 《数据结构与算法分析——C语言描述》【美】Mark Allen Weiss · 《算法导论》【美】Thomas H.Cormen；Chales E.Leiserson；Ronald l.Rivest 编译原理· 《编译系统透视：图解编译原理》新设计团队，入门书籍 · 《编译原理》（龙书）【美】Alfered V.Aho；Monica S.Lam；Ravi Sehi；Jeffrey D.Ullmam 其他· 《编程高手箴言》梁肇新 · 《代码整洁之道》【美】Robert C.Martin · 《代码大全》【美】Steve McConnell 网络技术· 《TCP/IP详解（卷1：协议）》【美】Kevin R.fall；W.Richard Stevens · 《Wireshark数据包分析实战》【美】Chris Sanders 安全技术安全开发· 《天书夜读：从汇编语言到Windows内核编程》谭文；邵坚磊 · 《Rootkit：系统灰色地带的潜伏者》【美】Bill Blunden · 《Rootkits——Windows内核的安全防护》【美】Gerg Hoglund；James Butler · 《BSD ROOTKIT设计——内核黑客指引书》【美】Joseph Kong · 《寒江独钓：Windows内核安全编程》谭文；杨潇；邵坚磊 逆向工程· 《恶意软件分析诀窍与工具箱——对抗“流氓”软件的技术与利器》【美】Michael Hale Ligh；Steven Adair · 《C++反汇编与逆向分析技术揭秘》钱林松；赵海旭 · 《IDA权威指南》【美】Chris Eagle · 《逆向工程权威指南》【乌克兰】Dennis Yurichev，多平台入门大全 · 《Android软件安全与逆向分析》丰生强 · 《macOS软件安全与逆向分析》丰生强 · 《iOS应用逆向工程（第2版）》沙梓社；吴航 Web安全· 《黑客攻防技术宝典：Web实战篇》【美】Marcus Pinto，Dafydd Stuttard · 《白帽子讲Web安全》吴翰清 · 《Web安全测试》【美】Paco Hope；Ben Waltber · 《Web前端黑客技术揭秘》钟晨鸣；徐少培 · 《精通脚本黑客》曾云好 软件/系统安全· 《0day安全：软件漏洞分析技术（第2版）》王清，入门书籍 · 《漏洞战争：软件漏洞分析精要》林桠泉，进阶书籍 · 《捉虫日记》【德】Tobias Klein，进阶书籍 · 《黑客防线2009缓冲区溢出攻击与防范专辑》 · 《内核漏洞的利用与防范》【美】Enrico Perla；Massimiliano Oldani · 《Fuzzing for Software Security Testing and Quality Assurance（第2版）》【美】Charlie Miller，博文视点翻译中 · 《iOS Hackers’s Handbook》【美】Charlie Miller，不推荐中文版 · 《The Mac Hacker’s Handbook》【美】Charlie Miller · 《Android安全攻防权威指南》【美】Joshua J.Drake；【西】Pau Oliva Fora；【美】Collin Mulliner · 《The Art of Softwar Security Assessment:Identifying and Preventing Software Vulnerabilities》【美】Mark Dowd · 《Android安全攻防实战》【美】Keith Makan；Scott Alexander-Bow · 《模糊测试-强制性安全漏洞挖掘》【美】Michael Mutton · 《Exploit编写系列教程》【美】Corelan Team · 《MacOS and iOS Internals,Volume Ⅲ: Security &amp; Insecurity》【美】Jonathan Levin，博文视点翻译中，预计今年上市 · 《灰帽黑客：正义黑客的道德规范、渗透测试、攻击方法和漏洞分析技术》【美】Allen Harper；Shon harris · 《威胁建模：设计和交付更安全的软件》【美】Adam Shostack 无线电安全· 《无线电安全攻防大揭秘》杨卿；黄琳 硬件安全· 《硬件安全攻防大揭秘》简云定，杨卿 汽车安全· 《智能汽车安全攻防大揭秘》李均；杨卿 · 《汽车黑客大曝光》【美】Craig Smith 产品· 《人人都是产品经理》苏杰 运营· 《运营之光2.0：我的互联网运营方法论与自白》黄有璨 设计· 《写给大家看的设计书》【美】Robin Williams · 《听故事，学PPT设计》杨雪 软技能· 《软技能：代码之外的生存指南》【美】John Sonmez · 《程序员健康指南》【美】JoeKutner · 《影响力》【美】Robert B.Cialdini · 《穷爸爸富爸爸》【美】Robert Toru Kiyosaki · 《横向领导力》【美】Roger Fisher；Alan Sharpe · 《职业情商》张新越 · 《程序员的成长课》安晓辉；周鹏 · 《高效演讲：斯坦福最受欢迎的沟通课》【美】Peter Meyers；Shann Nix · 《程序员的英语》【韩】朴栽浒；李海永 · 《思考，快与慢》【美】丹尼尔·卡尼曼 · 《少有人走的路》【美】斯科特·派克 · 《异类：不一样的成功启示录》【加】 马尔科姆·格拉德威尔 · 《见识》吴军 · 《英语写作手册：风格的要素》【美】William Strunk · 《非暴力沟通》【美】马歇尔·卢森堡 · 《风格感觉：21世纪写作指南》【美】史蒂芬·平克 · 《浪潮之巅》（上下册）吴军 · 《一本小小的蓝色逻辑书》【加】布兰登•罗伊尔著 后续更新可关注GitHub：https://github.com/riusksk/secbook","categories":[],"tags":[{"name":"转载","slug":"转载","permalink":"https://armincxh.github.com/tags/转载/"}]},{"title":"购书心得-转载","slug":"购书心得-转载","date":"2019-08-30T11:27:37.000Z","updated":"2019-08-30T11:45:40.297Z","comments":true,"path":"2019/08/30/购书心得-转载/","link":"","permalink":"https://armincxh.github.com/2019/08/30/购书心得-转载/","excerpt":"","text":"购书心得 富家不用买良田，书中自有千钟粟；安居不用架高堂，书中自有黄金屋；出门莫恨无人随，书中车马多如簇；娶妻莫恨无良媒，书中自有颜如玉；男儿若遂平生志，六经勤向窗前读。 —— 宋真宗赵恒《劝学诗》 移动安全篇国 内移动安全书籍很少，主要还是以国外的居多，虽然大部分未引进，但是很多可以在网上找到高清彩色英文原版，有些可能就是官方自己发出来的。虽然国外这方面 的书籍多，但看过几本Andorid安全书籍，感觉还是一般，深度不够，比如《Android Security：Attacks and Defenses》、《Android Apps Security》、《Mobile Application Security》、《Mobile Malware Attacks and Defense》,国内的《移动互联网之智能终端安全揭秘》也是不推荐，过多列点组装，缺乏个人主观理解，《Android安全机制解析与应用实践》更是 别买，学术派写的wiki式书籍。笔者推荐几本：《Android Security Cookbook》、《Android 软件安全与逆向分析》主要是讲Android应用安全，Android系统安全的书籍尚无专著出版，不过4月份《Android Hacker’s Handbook》就要出版了，看目录还是感觉蛮有料的，iOS安全书籍相对少一些，主要有《iOS Hacker’s Handbook》（主要讲系统安全，别买中文版，译者缺乏软件安全基础，错误太多，令人不忍直视）、《iOS应用安全攻防》（英文版，偏向应用安全）、 《iOS应用逆向工程:分析与实战》（今年刚出的iOS应用逆向方面的书籍），其它关于Android与iOS开发的书籍，网上电子版很多，自己挑着看 吧，移动安全方面的书籍，我大多是看电子书，买的纸质书基本都是不行。所以目前，移动安全书籍，还是尽量看国内英文原版吧，如果对Android安全感兴 趣的，看下《Android Hacker’s Handbook》一书（补充：目前网上已有电子版）。 程序设计篇此处 程序语言主要以C、ASM为主，毕竟自己主要也只是学这两门语言，其它脚本语言，如PHP、ASP就不提了。关于C语言的书籍就有传说中的 “C语言四大名著”，即《C程序设计语言》、《C和指针》、《C陷阱与缺陷》、《C专家编程》，感觉在C编程上这几本书就够用了，至于数据结构和算法可参 考其它国外名著。国产的编程书籍没几本可出手的，关于C入门书籍，很多人会推荐谭浩强那书，最初我也是读这本书入门的，但后来慢慢地发觉那书不是很好，错 误不少，编程风格也不好。对于那些写着精通XXX、24小时XXX、30天XXX、XXX从入门到精通，这些书都是拿书名来忽悠人的，纯粹是作者用来骗稿 费的，对比一下那些国外名著的书名就知道了，一本好书一般是不会用那些土名字的。我很赞成SAI兄弟说的，半年之内不接触的技术，就不用去买这方面的书籍 了。关于ASM主要就《80x86汇编语言程序设计》、《windows环境下的32位汇编程序设 计》这两本，汇编语言的书籍相对会少一点，一些网上书店的程序设计一栏中甚至没有asm一类。很多编程书籍的内容写的都是千篇一律，比如C语言书籍， 不外乎都是些变量、数组、指针这些，但是某些书籍中就会有提到编程风格、内存优化、树、链表、折半搜索法，GDB调试，linux方面的知识，比如《c primer plus》《C和指针》，这些也算是书本的一个亮点。关于windows编程，首推《windows程序设计》上下册、《windows核心编程》，其它 的感觉也没必要看太多，还是以实践为主。编程书籍由于附有很多代码，在电脑上看电子版的感觉很伤眼，容易眼疲劳，因此有必要的话，可以买实体书来看，而且 在实际应用中，有时可以再拿出来参考参考，方便查阅。与此同时，也要奉劝大家“纸上得来终觉浅，绝知此事要躬行”，特别是对于编程学习者，一定要动手写代 码，光看书是没用，这也是我曾经犯过的错误！而且有些书是用来参考查阅，不是用来看的，不然即使你把那些牛书都看完 ，到最后也可能连几句代码也写不出来，最后受伤的永远是你自己！ 逆向工程篇关于逆向工程这方面的书籍，自然是首 推看雪出版的《加密与解密》，在这方面，看雪的实力不会比国外的差，那里是逆向学习交流的好场所。在加解密第3版出版的时候就曾出现过山寨版的，因此大家 在购买时得看清楚了，最好到正规的书店购买，目前可能网上买不到了，不过网上有电子版。另外这方面的书籍还有《黑客反汇编揭密》《黑客调试技术揭密》 《逆向工程揭密》，国内出版的《软件调试》也是本牛书，弥补了国内这方面的空缺。还有出版的《IDA权威指南》也是本不错的书籍，详细讲解了IDA的 方方面面，看了之后，你会发现，会用IDA与不会用的差别有多大了。看雪翻译小组也曾出版过一本《IDA Pro代码破解揭秘》，不过这书我也没看过。在逆向工程这方面的书籍也差不多就这么几本了，其它像加解密入门实战，加密与解密实战超级手册，加解密全攻 略……这些基本上都可以摒弃，基本都是抄看雪加解密一书上的东西，大家无须花金钱、时间和精力在此上面。关于获取最新书讯的方法，大家可以订阅互动出版网 计算机新书的RSS，只要有计算机新书出来立马就知道了，它上面经常更新，不过很也是应用技术书籍，对于这些书籍，很多是 没必要买的，比如什么 windows 7使用大全，精通注册表，windows操作XXX，有必要的话，直接百度、google就行了，没必要花钱去买这类书籍。 脚本安全篇在 脚本攻防方面的书籍，最早的曾云好写的《精通黑客脚本》，这书写得相当全面，由浅入深，虽然不厚，但排版密集，内容还是很多的，只是纸质不太好，很 粗糙，里面有很多渗透实战案例，当年国内这方面的法律还不是很严格，若是放在今天，可能里面一些内容会被删除掉。另外大家也可看看老外的 《黑客攻防技术宝典：WEB实战篇》（重点推荐）《xss attack》《sql injection》（中译本：《SQL注入攻击与防御》），以及《WEB安全测试》，英文版的网上有电子书。近两年国内出版的，主要就《白帽子讲WEB 安全》、《WEB前端黑客技术》，推荐一阅。 系统底层篇当年看的第一本系统原理书籍是《深入理解计算机系统》，很不错的一本书。其它此类书籍还有《深入解析windows操作系统》《widnows系统原理与 实现》等，国内之前还出了本 《windows操作系统原理》，上面还写着重点大学计算机教材，后面看了乱雪博客上一篇文章后才知道那书是抄袭的，还被原作者控告了，最后还赔偿 了，当年我还从头看完了。关于溢出攻击的书籍，国内主要有《网络渗透技术》、《0day安全：软件漏洞分析技术》《灰帽黑客》，虽然 网渗一书很早出版，其中有些已经过时，但是其思想是不会过时的。若想获取最新书籍，最好的方法还是上面说的：订阅RSS。对于一些不熟悉的技术书籍，一定 要先看完整目录，然后找找网上是否有电子版的，如果有就先看看再决定是否再买，另外如果你已经买或看过同类的经典书籍，就需要重新考虑是否真的有必要买 了。讲了那么多要花钱的书，下面讲讲免费的一套，那就《intel开发手册》，这一套是由因特尔公司免费向全球赠送的书籍，共五本，之前我还订了两套，全 都从美国寄到学校来了，原本以为第一封邮件没收到，就再发了一封，没想到Intel居然连送两套过来，真是大方的不行啊！现在他们已经不再寄送纸质书，仅 寄送包含电子版的光盘。’","categories":[],"tags":[{"name":"转载","slug":"转载","permalink":"https://armincxh.github.com/tags/转载/"}]},{"title":"书籍推荐-转载","slug":"给计算机初学者的书籍推荐-转载","date":"2019-08-30T11:26:04.000Z","updated":"2019-08-30T11:45:25.745Z","comments":true,"path":"2019/08/30/给计算机初学者的书籍推荐-转载/","link":"","permalink":"https://armincxh.github.com/2019/08/30/给计算机初学者的书籍推荐-转载/","excerpt":"","text":"C/C++ 1、《C程序设计语言》 入门推荐 2、《C Primer Plus》 入门推荐 3、《C和指针》 4、《C陷阱与缺陷》 5、《C++ Primer》入门推荐 为了更深入地理解程序原理，建议再学一下汇编语言 《现代x86汇编语言程序设计》 Linux 《UINX环境高级编程》 后台开发必读 《鸟哥的Linux私房菜》 Linux运维推荐入门系列 《Linux内核设计与实现》 网络 《TCP/IP详解卷1：协议》 Java 《Java编程语言》 入门推荐 《Java编程思想》 Python 《Python核心编程》（第2版），第3版难度加大，内容变更较多，用2版入门足够，perl现在已经没落了，可不学 数据库 《MySQL技术内幕》，目前企业所用后台大多是linux+mysql，所以主要学习下mysql就足够 如果对网站开发有兴趣可以一并看下《php和mysql web开发》 系统原理 《深入理解计算机系统》强烈推荐，搞懂这本就基本能阅读大部分计算机相关著作 计算机组成原理 《编码：隐匿在计算机软硬件背后的语言》 windows编程，估计你们会有windows编程的课程，如果有学下面这两本就足够了 《Windows程序设计》charles petzold(著) 《Windows核心编程》 编译原理 龙书《编译原理》，如果看不懂，推荐下面一本 《编译系统透视：图解编译原理》 数据结构与算法 《数据结构与算法分析——C语言描述》，也有一本是C++语言描述 《算法导论》 编程主要靠实践，多电脑敲代码，最好以开发某款软件为目标去多写代码 学完基础课程，建议也学习下服务器安全方面的知识 上面不少书在网上有电子版，可以先下载看看，不清晰的再买实体书，或者图书馆去借 其它一些进阶与提升的书，可以多逛逛图书馆 给计算机初学者的！","categories":[],"tags":[{"name":"转载","slug":"转载","permalink":"https://armincxh.github.com/tags/转载/"}]},{"title":"读书❤得","slug":"读书❤得","date":"2019-08-30T11:16:43.000Z","updated":"2019-08-30T11:59:56.812Z","comments":true,"path":"2019/08/30/读书❤得/","link":"","permalink":"https://armincxh.github.com/2019/08/30/读书❤得/","excerpt":"","text":"读书心悟”读史使人明智，读诗使人聪慧，演算使人精密，哲理使人深刻，道德使人高尚，逻辑修辞使人善辩。 “ ———— 培根《论读书》 为什么读书？ ”你的梦想是什么？“”长大以后我要当一名科学家。” 读书是为了丰富个人修养，是为了拥有一技之长，能够靠它在社会上生存的技能。 后来随着阅历的增长，慢慢意识到，其实读书的目的总结起来就一句话：为了拥有更多的选择权。 正如龙应台在《亲爱的安德烈》中所述说的那样： 孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。 读完即忘，为何仍要读书？也许经常有人会问，书读完就忘记了，那读书还有什么用呢？ 如果是我，我会这样回答：”每日三餐吃完又拉，为何又还要吃饭呢？也许吃几天饭没能看出什么变化，但小孩子吃到成年呢？那变化够明显吧。读书亦是如此，短期看不出变化，但长期它会慢慢变成我们血肉的一部分，相伴一生！“ 王阳明《传习录》中有一段话： 一友问：“读书不记得，如何？”先生曰：“只要晓得，如何要记得？要晓得已是落第二义了，只要明得自家本体。若徒要记得，便不晓得；若徒要晓得，便明不得自家的本体。” 深以为然，其实读书不用非得记得，能够理解书中道理即可。非得背诵强记，往往都是用来应付考试的手段。 《传习录》中说到，”如读书时，良知知得强记之心不是，即克去之;有欲速之心不是，即克去之;有夸多斗靡之心不是，即克去之。“ 若能以不为考试、不为显摆、不为私欲，只以无心之心而读书，则足矣！ 读书方法 春节刚好读完一本叫《如何阅读一本书》，虽没想像中那般好，但书中所提的4种阅读层次还是可以当作参考的。 基础阅读：小学至初中的语文功底就足够了，即能够识字，读懂字面意思即可。 检视阅读：换言之，即快速阅读，该层次可分为2种方法。1、系统化略读：比如通过书名、目录、序言、作者介绍、随手阅读几个段落等方式来判断该书的分类、主题以及内容质量，我一般就是通过此方式来判断买不买书的。对于一些专业书籍，就需要一定的知识背景才能有更好地做出判断。2、快速性通读：即不求甚解地快速通读全书，若有必要，再有侧重地细读一遍。 分析阅读：原书写得有点复杂，个人觉得没必要，只要能够分析清楚书本的主题内容、全书结构、理解书中观点或原理，带着问题去书中求解，看能从中找到答案吗，读完之后能够准确地评价该书，这就差不多了。 主题阅读：最高层次的阅读方式，根据同一主题内容去阅读多本同类书籍，因此也叫比较阅读。往往运用在主动研究某个领域所采取的方法。 后记中小学时代，读书大多是为了考试，总是有些不情不愿的，所以那时并不是那么喜欢读书。 后来。。。 渐渐地才意识到，其实我是喜欢读书的，只是被应试教育所毒害过。 所以能够以兴趣为导向，无欲无求，以无心之心而读书，或许才是最佳的读书状态。","categories":[],"tags":[{"name":"❤blog","slug":"❤blog","permalink":"https://armincxh.github.com/tags/❤blog/"}]},{"title":"《态度》-读后感","slug":"读书笔记-《态度》","date":"2019-08-30T11:00:10.000Z","updated":"2019-08-30T11:59:45.672Z","comments":true,"path":"2019/08/30/读书笔记-《态度》/","link":"","permalink":"https://armincxh.github.com/2019/08/30/读书笔记-《态度》/","excerpt":"","text":"在本书中，主要分6部分来讲，分别讲了一些做人做事的原则、对待金钱和人际关系的态度、还有学习和人生哲学的一些观点。关于教育作者说”教育改变命运“，其实多数读书人应该都认同这一观点，他在书中讲述了3个观点： ”教育改变命运“已成为全世界大部分国家的共识 欧洲很早就意识到教育对人一生的帮助，所以很早就开始兴办免费教育，让交不起学费的贫家子弟都可以到”官办“学校读书，牛顿就是靠这种免费的公立教育完成中学学业，进入剑桥大学的。很多来自中国农村的贫穷人家，为了摆脱贫穷，让自己子女接受良好的教育，通过一代人的努力摆脱贫穷，改变命运。 衣食无忧的富家子弟也有必要接受教育 中国著名作家吴晓波，就是那个写了《腾讯传》的人，调查了早期在股市上发财的几十人，发现除了一两个之外，其他人的结局无一例外都很惨，有破产的，有坐牢的，有被仇家杀的，有正在被追杀的。这些人都有两个共同点：第一，敢于冒险；第二，受教育水平低，最高中学学历。因此，他们在有了钱之后，没有更高的理想和追求。 【PS】：在中国，尤其是农村 ，一些没接受过多少教育的暴发户，有时会对年轻人或读书人说：“读书没有用的，你读那么多书赚的还不是没我多”！如果此时你对他说：“让你的孩子退学吧！“，估计他就没话了。还有一些在外工作多年的人，包括腾讯人，有时过年同学聚会，发现一些曾经读书不好或者辍学的老同学现在混得相当不错，比自己好太多的时候，通常都会反问自己：“读那么多书真的有用吗“？这种情况都是”幸存者偏差“的认识而已（顺便给大家推荐另一本书《思考，快与慢》，里面就讲了很多这种思考或认识的陷阱）。记得，腾讯内部论坛就有人发过这样感慨。 对退学创业的误解 互联网行业的退学创业代表主要有5人：比尔盖茨、乔布斯、佩奇、布林，以及扎克伯格。佩奇和布林是进入斯坦福读博士之前退学的，盖茨和扎克伯格情况类似，人家都是上过哈佛的，同样比绝大部分年轻人都出色，并接受过良好的教育，而且他们都是创业成功之后才退学的。乔布斯是因为不忍花父母的钱才没有读大学的，但至少是在斯坦福大学接受过教育的，如果他来自一个相对富有的家庭，或许会读完大学。 关于格局决策时格局要大，做事时境界要高。用作者通俗一点的话来讲，就是要长远考虑，尽可能往最好的目标努力。 书中举例几个MIT和哈佛毕业生组成的创业团队，他们打算做高频交易（在股市中通过快速操作以赚取低买高卖时差价）的创业项目，作者认为他们都是非常聪明的人，但做事的格局不大，因为这赚不到大钱，属于小打小闹，而且这事仅是提高股市交易量，并无其它意义，对世界更不可能产生任何重大影响，而且这件事的公司已经很多了。 这种看似只赚不赔的高频交易公司为何做不到像Google、Apple那样赚更多钱呢？因为前者以改变世界为目的，后者以赚小钱、小富即安为目的。 很多亚裔家长一直在纠结孩子上名校是否有用？作者对此的观点是，如果格局提升不上去，上了也没有用，还达不到谷歌员工的平均水平。 关于贫穷一个生于富有家庭的孩子不怕别人说他穷的，而一个贫家子弟通常反而怕别人说他穷，看不起他。卖肾买iPhone的人，一定是贫家子弟，怕别人说他穷。于是，很多穷人最后还是选择与穷人，甚至比自己穷的人为伍，成绩差的孩子还是选择扎堆一块玩。久而久之，那些人就无法摆脱原属阶层了。 大家常说：”物以类聚，人以群分“，因为这样对人来说，交际成本是最低的，也是最舒适的方式。一般人都不太愿意跳出自己的舒适区，去尝试更有难度且有助提升自我的挑战。 不管贫穷与否，如果事情做不好，那么你所处的地位可能与贫穷无异。通常情况下，人的心理能否接受自己不如别人，在可能会被别人嘲笑的情况下，是否还能努力往前走，直到改变自己的状态，这就是一种考验，与走出贫困差不多。 其实多数人都知道，要多向学习好的、能力强的人为伍，这些道理小学老师都经常说。但有时要去向比自己牛逼的人学习请教，也是需要一点勇气，以及改变自我的努力和决心。 关于投资作者在书中挺推荐买标准普尔500指数，还让他女儿拿1/3的钱直接购买标普500指数ETF，每过两三个月就继续定投，不管涨跌。说实话，我也没关注这指数，今天赶紧加个关注先。 作者对投资给出了4条建议： 永远不要觉得自己能够打败市场 我觉得下面这张图已经足够说明一切了，最近在微信和朋友圈上传得挺火的。 对市场要有信心 作者说，股市有涨有跌，但要相信股市在较长的时间里是往上走的。 我曾经对腾讯700也是迷之自信，但你看看现在，这一年都跌成啥样了，当然如果你说再等个一两年，那应该还是涨的，看谁命长了。还好作者后面补了个第3点。 虽然股市在下跌后总会涨回来，但是单一股票未必。 在2000年股价到达顶点的英特尔和思科，今天的股价不足当年的1/4，而且可能永远没有机会回到当时的峰值了。也就是说，投资单一的股票，即使遇到明星公司，也未必能长期赚钱。 时间是你的朋友，而时机不是。 投资要有耐心，不要急于求成。聪明的投资人永远在股市上投资，而不是试图投机挑选最低点和最高点。因此，走出坏运气的关键是耐心，让时间成为我们的朋友。 除以上建议之外，作者还给出了3条禁忌： 不要进行过于冒险，会导致来顶之灾的投资 比如做空股票和使用杠杆投资，你们再回头看看“格雷厄姆的微笑”吧！ 不要进行自己不懂的投资 拿自己的短处和别人的长处比，胜算微乎其微。同时，你看不懂的投资里面常常有很多陷阱。 不要被那些所谓的失去了的投机机会乱了方寸 经常有人说：”如果我当初买了比特币，今天能赚100倍“。这种话是没有意义的，如同中彩票一般，是运气，遇不上，也不必在意，因为人生的机会还有很多。 关于友情作者在书中讲到一个在腾讯的经历，大家感受下，其它就不啰嗦了： 关于交际与我们接触的人当中，可以分为4种： 与自己关系好，能力强； 与自己关系好，能力有限； 并非自己朋友，但能力强； 与自己关系不好，能力不强。 第1种好办，第4种交集不多，可以忽略，所以为人处世方面，我们需要比较留意的第2和第3种人。 对于这些人，我们必须理性对待，避免依据个人喜好来判断人和事：符合自己喜好的人，无论他们做什么都觉得好；不符合自己喜好的人，无论他们做什么都要挑毛病。 比如特朗普，很多人讨厌他，其实我也讨厌他，然后就有很多人对他做的任何事都持反对意见，无论对错，这就有点失去理想了。 在社会上，个人生活和事业有时是需要他人的支持和帮助，需要我们能够团结大多数人，把事情做好。 关于拒绝作者举例说曾有朋友找他帮忙，就是帮个孩子联系谷歌或者腾讯的实习机会，但看了孩子材料之后就直接回绝了。那朋友也表示理解，就没有再提此事。 这种事太常见了，尤其是在腾讯这类公司，很多人会找过来帮忙找个工作之类，现在基本每次回家都有人找我。以前有人让我帮忙投简历，我一般都直接帮投了，即使有些简历或者学历问题，基本都拿不到面试机会的，我也帮忙投了，所以在公司那个”伯乐“平台上，结果全是拒绝的。后来，我学聪明了，不再当”老好人“。一些简历有问题，有明显水平不行的，我都委婉地回绝掉。一方面，投了也是白投，另一方面HR又不傻，我老帮人投这类简历，别人还会觉得我看人的水平太次太有问题了。 对于别人请帮忙的事，作者总结出4点，按不同情况采取不同的方法处理： 能力不及，不能帮上忙，直接在第一时间委婉拒绝。 能帮上忙，但是自己代价太大，不想帮的，就不要勉强自己，但也要及早通知对方。 不论多困难都愿意帮，而且极有可能办成，这时就答应对方，然后全力去做。 虽然愿意帮，但有可能帮上，也可能帮不上，这时要将实际情况说明，千万不要轻易许诺。 结语这书整体上我觉得还不错，虽然有些是对中学生或大学生说的道理，很多事情自己经历过也都明白，但也有一些适合不同年龄段的人学习的知识点，所以还是推荐阅读。 喜欢吴军写的书，并非崇拜对方，而他写的书确实很好，也很用心。在这种浮躁的社会，出书也不容易，写好书更不容易，自己出过书的人应该更有体会。 ps:后来有买了一本《见识》，看了一部分，感觉还不错。对了，下次有时间也来写一个读后感哈的。。。","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"Markdown语法--转载","slug":"README语法-转载","date":"2019-08-30T10:51:55.000Z","updated":"2019-08-30T10:56:33.059Z","comments":true,"path":"2019/08/30/README语法-转载/","link":"","permalink":"https://armincxh.github.com/2019/08/30/README语法-转载/","excerpt":"","text":"转载 那么首先我们一起来看一下它的「定义」： Markdown 是一种轻量级标记语言，创始人为 John Gruber。它允许人们「使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档」。——维基百科 本文档的目的不在于面面俱到地介绍 Markdown，只是作为我对其理解的笔记整理，希望能同时帮助一些对 Markdown 感兴趣的人快速上手，或是作为一个工具，供对其已经有所了解的人在需要时参考。 接下来请随我一起深入了解这门并不神秘的实用标记语言。 背景 优点 使用场景 编辑工具 语法 标题 段落 行内格式 引用块 超链接 图片 列表 代码块 水平分割线 嵌入 HTML 扩展语法 表格 任务列表 删除线 自动链接 emoji 奇技淫巧 画流程图和时序图 插入数学公式 用 Markdown 做 PPT 用 Markdown 写微信公众号 更多 参考 背景优点 专注于文字内容； 纯文本，易读易写，可以方便地纳入版本控制； 语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版。 使用场景 各类代码托管平台 主流的代码托管平台，如 GitHub、GitLab、BitBucket、Coding、Gitee 等等，都支持 Markdown 语法，很多开源项目的 README、开发文档、帮助文档、Wiki 等都用 Markdown 写作。 技术社区和写作平台 StackOverflow、CSDN、掘金、简书、GitBook、有道云笔记 论坛 V2EX、光谷社区 个人感觉比较遗憾的一点是各平台可能采用不同语言实现的 Markdown 解析引擎，或采用同一解析引擎的不同版本，而且可能有不同程度的定制与扩展，这导致在不同平台上使用 Markdown 写作时体验并不完全一致。不过幸好对于大家公认的一些标准语法，各家都是支持的。 编辑工具理论上任何一款文本编辑器都能用于编辑 Markdown 文档，它们分别提供了不同程度的语法高亮、预览等功能，以下只是列举其中一部分，选择自己称手的即可。 现代编辑器 VSCode / Atom 传统编辑器 Vim / Emacs / Sublime Text / Notepad++ IDE 自带编辑器 IntelliJ IDEA / Android Studio / WebStorm 专用编辑器 Ulysses / Mou / Typora / Markpad 在线编辑器 各种支持 Markdown 的网站都提供了在线编辑器 语法标题Markdown： 1234567891011# atx-style 一级标题## 二级标题###### 六级标题Setext-style 一级标题===二级标题--- 预览效果： atx-style 一级标题二级标题六级标题Setext-style 一级标题二级标题 对应 HTML： 123456789&lt;h1&gt;atx-style 一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h6&gt;六级标题&lt;/h6&gt;&lt;h1&gt;Setext-style 一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt; 段落中间没有空行的连续不断的几行文字被视为一个段落。 Markdown： 123456789白日依山尽，黄河入海流。（句号后面没空格）欲穷千里目，更上一层楼。 （句号后面有俩空格） 预览效果： 白日依山尽， 黄河入海流。（句号后面没空格） 欲穷千里目， 更上一层楼。（句号后面有俩空格） 对应 HTML： 123456789101112&lt;p&gt;白日依山尽，&lt;/p&gt;&lt;p&gt;黄河入海流。（句号后面没有空格）&lt;/p&gt;&lt;p&gt;欲穷千里目，&lt;/p&gt;&lt;p&gt; 更上一层楼。 &lt;br&gt; （句号后面有俩空格）&lt;/p&gt; 行内格式对段落或者部分文本的强调效果。 Markdown： 123后面俩字**加黑**后面俩字*斜体* 预览效果： 后面俩字加黑 后面俩字斜体 对应 HTML： 12345678&lt;p&gt; 后面俩字 &lt;strong&gt;加黑&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; 后面俩字 &lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt; 引用块Markdown： 123456&gt; 引用块段落一。&gt;&gt; 引用块段落二。&gt;&gt; 内嵌引用块段落一。&gt;&gt; ### 引用块内的标题 预览效果： 引用块段落一。 引用块段落二。 内嵌引用块段落一。 引用块内的标题 对应 HTML： 12345678&lt;blockquote&gt; &lt;p&gt;引用块段落一。&lt;/p&gt; &lt;p&gt;引用块段落二。&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;内嵌引用块段落一。&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=\"引用块内的标题\"&gt;引用块内的标题&lt;/h3&gt;&lt;/blockquote&gt; 超链接Markdown 支持行内式链接和引用式链接。 Markdown： 12345678910行内式 [博客](https://mazhuang.org &quot;我的个人博客&quot;) 链接，带 title。行内式 [GitHub](https://github.com/mzlogin) 链接。引用式 [博客][1] 链接。引用式 [GitHub][2] 链接，带 title。[1]: https://mazhuang.org[2]: https://github.com/mzlogin &quot;我的 GitHub 主页&quot; 预览效果： 行内式 博客 链接，带 title。 行内式 GitHub 链接。 引用式 博客 链接。 引用式 GitHub 链接，带 title。 对应 HTML： 1234567&lt;p&gt;行内式 &lt;a href=\"https://mazhuang.org\" title=\"我的个人博客\"&gt;博客&lt;/a&gt; 链接，带 title。&lt;/p&gt;&lt;p&gt;行内式 &lt;a href=\"https://github.com/mzlogin\"&gt;GitHub&lt;/a&gt; 链接。&lt;/p&gt;&lt;p&gt;引用式 &lt;a href=\"https://mazhuang.org\"&gt;博客&lt;/a&gt; 链接。&lt;/p&gt;&lt;p&gt;引用式 &lt;a href=\"https://github.com/mzlogin\" title=\"我的 GitHub 主页\"&gt;GitHub&lt;/a&gt; 链接，带 title。&lt;/p&gt; 图片在超链接的写法前加一个 !，就是引用图片的方法。 Markdown： 1![Alt text](https://mazhuang.org/favicon.ico &quot;favicon&quot;) 预览效果： 对应 HTML： 1&lt;img src=\"https://mazhuang.org/favicon.ico\" alt=\"Alt text\" title=\"favicon\"&gt; 列表包括有序列表和无序列表。 Markdown： 1234567- 苹果- 葡萄- 榴莲1. 苹果2. 葡萄3. 榴莲 预览效果： 苹果 葡萄 榴莲 苹果 葡萄 榴莲 对应 HTML： 12345678910&lt;ul&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;葡萄&lt;/li&gt; &lt;li&gt;榴莲&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;葡萄&lt;/li&gt; &lt;li&gt;榴莲&lt;/li&gt;&lt;/ol&gt; 其中无序列表的标记可以使用 +、- 或 *，有序列表前的数字可以是乱序的。 代码块支持行内代码和代码块。 Markdown： Android 里使用 `TextUtils` 类的 `isEmpty` 方法来判断字符串是否为空。 123if (TextUtils.isEmpty(text)) &#123; return null;&#125;预览效果： Android 里使用 TextUtils 类的 isEmpty 方法来判断字符串是否为空。 123if (TextUtils.isEmpty(text)) &#123; return null;&#125; 对应 HTML： 12345&lt;p&gt;Android 里使用 &lt;code&gt;TextUtils&lt;/code&gt; 类的 &lt;code&gt;isEmpty&lt;/code&gt; 方法来判断字符串是否为空。&lt;/p&gt;&lt;div class=\"highlight highlight-source-java\"&gt;&lt;pre&gt;&lt;span class=\"pl-k\"&gt;if&lt;/span&gt; (&lt;span class=\"pl-smi\"&gt;TextUtils&lt;/span&gt;&lt;span class=\"pl-k\"&gt;.&lt;/span&gt;isEmpty(text)) &#123; &lt;span class=\"pl-k\"&gt;return&lt;/span&gt; &lt;span class=\"pl-c1\"&gt;null&lt;/span&gt;;&#125;&lt;/pre&gt;&lt;/div&gt; 上例中的语言标记 java 可选填，可用于在编辑器和渲染后的效果里添加语法高亮。 块式代码也可以对整个代码段缩进四个空格，或一个 Tab 来实现。 水平分割线使用一个单独行里的三个或以上 *、- 来生产一条水平分割线，它们之间可以有空格。 Markdown： 12345***------ - - 预览效果： 对应 HTML： 12345&lt;hr /&gt;&lt;hr /&gt;&lt;hr /&gt; 嵌入 HTMLMarkdown 标记语言的目的不是替代 HTML，也不是发明一种更便捷的插入 HTML 标签的方式。它对应的只是 HTML 标签的一个很小的子集。 对于那些没有办法用 Markdown 语法来对应的 HTML 标签，直接使用 HTML 来写就好了。 扩展语法本节的内容是介绍一些受到广泛支持的 Markdown 扩展语法。 表格Markdown： | 编号 | 姓名（左） | 年龄（右） | 性别（中） | | ----- | :-------- | ---------: | :------: | | 0 | 张三 | 28 | 男 | | 1 | 李四 | 29 | 男 |预览效果： 编号 姓名（左） 年龄（右） 性别（中） 0 张三 28 男 1 李四 29 男 对应 HTML： 123456789101112131415161718192021222324&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th align=\"left\"&gt;姓名（左）&lt;/th&gt; &lt;th align=\"right\"&gt;年龄（右）&lt;/th&gt; &lt;th align=\"center\"&gt;性别（中）&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td align=\"left\"&gt;张三&lt;/td&gt; &lt;td align=\"right\"&gt;28&lt;/td&gt; &lt;td align=\"center\"&gt;男&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td align=\"left\"&gt;李四&lt;/td&gt; &lt;td align=\"right\"&gt;29&lt;/td&gt; &lt;td align=\"center\"&gt;男&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 任务列表在 GitHub / GitLab 里有较好的支持。 Markdown： 123- [x] 洗碗- [ ] 清洗油烟机- [ ] 拖地 预览效果： 洗碗 清洗油烟机 拖地 对应 HTML： 12345&lt;ul class=\"contains-task-list\"&gt; &lt;li class=\"task-list-item\"&gt;&lt;input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"&gt; 洗碗&lt;/li&gt; &lt;li class=\"task-list-item\"&gt;&lt;input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"&gt; 清洗油烟机&lt;/li&gt; &lt;li class=\"task-list-item\"&gt;&lt;input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"&gt; 拖地&lt;/li&gt;&lt;/ul&gt; 如果是在 GitHub / GitLab 的 Issue 里，会附赠任务完成比例提示效果： 还可以直接在网页上拖动调整顺序，勾选和取消勾选。 删除线Markdown： 1后面三个字打上~~删除线~~。 预览效果： 后面三个字打上删除线。 对应 HTML： 1&lt;p&gt;后面三个字打上&lt;del&gt;删除线&lt;/del&gt;。&lt;/p&gt; 自动链接自动链接扩展，即：当识别到 URL，或用 &lt;、&gt; 包括的 URL 时，会自动为其生成 a 标签。 Markdown： 123https://github.com&lt;example@gmail.com&gt; 预览效果： https://github.com &#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109; 对应 HTML： 123&lt;p&gt;&lt;a href=\"https://github.com\"&gt;https://github.com&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=\"mailto:example@gmail.com\"&gt;example@gmail.com&lt;/a&gt;&lt;/p&gt; emoji以 GitHub Pages 为例。 Markdown： 1:camel: :blush: :smile: 预览效果： :camel: :blush: :smile: 对应 HTML： 12345&lt;p&gt; &lt;img class=\"emoji\" title=\":camel:\" alt=\":camel:\" src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f42b.png\" height=\"20\" width=\"20\"&gt; &lt;img class=\"emoji\" title=\":blush:\" alt=\":blush:\" src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f60a.png\" height=\"20\" width=\"20\"&gt; &lt;img class=\"emoji\" title=\":smile:\" alt=\":smile:\" src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png\" height=\"20\" width=\"20\"&gt;&lt;/p&gt; 奇技淫巧脑洞清奇的工程师们还发掘了很多使用 Markdown 的方法，大部分都是引入第三方 JavaScript 插件来实现。对这部分我只做简述，对其中的部分功能比如作图等，还是推荐用专门的可视化工具去做。 画流程图和时序图有部分网站和编辑器实现了对 Markdown 里流程图和时序图的支持，比如我们使用的项目管理工具 TAPD 的在线编辑器，还有 VSCode + 插件 Markdown Preview Enhanced 等。 以我们使用的项目管理工具 TAPD 的在线编辑器为例： 插入数学公式仍然以 TAPD 为例： 应该是利用 JavaScript 支持了 LaTeX 公式语法。 用 Markdown 做 PPT有专门的工具 Marp，另外使用 VSCode + 插件 Markdown Preview Enhanced 也可以实现。 用 Markdown 写微信公众号可以将公众号素材用 Markdown 编辑好后，贴到在线排版工具以后，复制到公众号编辑器里即可。有多种页面主题和代码主题可选择。 我维护的工具地址：https://md.mazhuang.org 更多想象力丰富的工程师们还扩展了很多基于 Markdown 的玩法，包括但不限于： 自动生成 / 更新 Table of Contents 流程图 / 时序图 制作幻灯片 集成 PlantUML / GraphViz 的能力 导出 HTML / PDF / 电子书 … 以上功能基本都可以用 VSCode + 插件 Markdown Preview Enhanced 实现。 另外可以参考我以前的一篇博客 关于 Markdown 的一些奇技淫巧。 参考 Markdown: Syntax - DARING FIREBALL Markdown - 维基百科 GitHub Flavored Markdown Spec 关于 Markdown 的一些奇技淫巧","categories":[],"tags":[{"name":"MARKDOWN","slug":"MARKDOWN","permalink":"https://armincxh.github.com/tags/MARKDOWN/"}]},{"title":"阅读计划","slug":"读书笔记","date":"2019-08-30T10:26:55.000Z","updated":"2019-08-30T11:51:19.742Z","comments":true,"path":"2019/08/30/读书笔记/","link":"","permalink":"https://armincxh.github.com/2019/08/30/读书笔记/","excerpt":"","text":"计划每月读2本书以上，也希望未来能够继续坚持。 互联网行业更新换代过快，需要永远保持一颗学习之心。 对于新兴的领域，仍需要不断学习，保持居安思危的心态。 而所学的，有时就可以通过写作方式，去整理和记录知识点，这也是学习过程的一部分。 同时我也想通过写作来提升文笔能力，语言表达能力。 至于为什么？因为我坚信在未来某一时候，会需要用到它。正所谓好记性不如烂笔头。 书单 《人性的弱点》（6分） 《代码整洁之道》（8分） 《如何阅读一本书》（8分） 《两晋南北朝那些事》（7分） 《软技能：代码之外的生存指南》（8分） 《横向领导力》（7分） 《程序员成长课》（8分） 《英语写作手册》（8分） 《运营之光》（8分） 《程序员的英语》（7分） 《见识》（9分） 《半小时漫画中国史1、2》（7分） 《Web安全之机器学习入门》（6分） 《秦崩》（8分） 《启功给你讲书法》（8分） 《思考，快与慢》（10分） 《Android应用安全防护与逆向分析》（7分） 《精进：如何成为一个很厉害的人》（8分） 《非暴力沟通》（9分） 《系统架构设计》（7分） 《人人都是产品经理》（8分） 《漏洞》（7分） 《风格感觉：21世纪写作指南》（8分） 《态度》（8分） 《写给大家看的设计书》（10分） 《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）","categories":[],"tags":[{"name":"阅读计划","slug":"阅读计划","permalink":"https://armincxh.github.com/tags/阅读计划/"}]},{"title":"一年多没更新了！","slug":"一年多没更新了！","date":"2019-08-30T07:24:03.000Z","updated":"2019-08-30T12:37:03.998Z","comments":true,"path":"2019/08/30/一年多没更新了！/","link":"","permalink":"https://armincxh.github.com/2019/08/30/一年多没更新了！/","excerpt":"","text":"以后每周最少更新一篇这样子。。。 至于为什么又想起来更新了呢？…….可能前段时间看了下《软技能：代码之外的生存指南》【美】John Sonmez。。。 ps:哪有这么多为什么呢！！！","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"[书犹药也，善读之可以医愚]","slug":"月亮与六便士","date":"2018-06-29T00:56:25.000Z","updated":"2019-08-30T12:00:07.493Z","comments":true,"path":"2018/06/29/月亮与六便士/","link":"","permalink":"https://armincxh.github.com/2018/06/29/月亮与六便士/","excerpt":"","text":"本书看点： ◎书中讲述了主人公原是位证券经纪人，人届中年后突然响应内心的呼唤，合弃一切到南太平洋的塔希提岛与土著人一起生活，获得灵感，创作出许多艺术杰作。 ◎威廉•萨默塞特•毛姆，英国小说家、戏剧家，被誉为“最会讲故事的作家”。 ◎“我为什么要从头看他呢？因为他很会讲故事，我就看他的故事，我看他写的人，就像我在英国接触到的所有的英国人，有一种特别的味道。”——董桥","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"😀😀😀阳光正好。。。","slug":"😀😀😀阳光正好。。。","date":"2017-12-09T12:19:19.000Z","updated":"2019-08-30T12:21:35.306Z","comments":true,"path":"2017/12/09/😀😀😀阳光正好。。。/","link":"","permalink":"https://armincxh.github.com/2017/12/09/😀😀😀阳光正好。。。/","excerpt":"","text":"阳光正好。。。 —YIAIHU PARK","categories":[],"tags":[{"name":"😀😀😀阳光正好。。。","slug":"😀😀😀阳光正好。。。","permalink":"https://armincxh.github.com/tags/😀😀😀阳光正好。。。/"}]},{"title":"《我在荒岛上迎接黎明》","slug":"《我在荒岛上迎接黎明》","date":"2017-09-29T07:14:09.000Z","updated":"2019-08-30T12:02:32.560Z","comments":true,"path":"2017/09/29/《我在荒岛上迎接黎明》/","link":"","permalink":"https://armincxh.github.com/2017/09/29/《我在荒岛上迎接黎明》/","excerpt":"","text":"​ 我希望自己也是一颗星星，如果我会发光，就不必害怕黑暗。如果我自己是那么美好，那么一切恐惧就可以烟消云散。 ​ ——《我在荒岛上迎接黎明》","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"Love Is In Small Things","slug":"Love-Is-In-Small-Things","date":"2017-09-29T06:37:24.000Z","updated":"2019-08-30T12:00:49.726Z","comments":true,"path":"2017/09/29/Love-Is-In-Small-Things/","link":"","permalink":"https://armincxh.github.com/2017/09/29/Love-Is-In-Small-Things/","excerpt":"","text":"昨晚做梦了，醒来收到一首你唱的歌 你是我的心跳。我也是… … 工作的时候很安静，难得见你这样不声不响。 如果眼神有力量，现在就让你的眼睛离开电脑，只看着我吧。 我时常这样想，却不想打扰你。你有你的事业，那是你的骄傲。 为什么坐在这里？ 因为想你一回头就能看到我。 即使经历了一天的奔波劳累，依旧想为你做一桌美食。 你在厨房忙碌的身影，看起来很温柔。一定是倾注了爱意的晚餐吧。 真幸运，那个人是我。 我真是娶了一个粗心的老婆，所以我务必要变成更细心的人啊。 她看起来活力满满，其实胆小得很。 所以不放心她一个人，担心她无法照顾好自己，然后就要陪上一辈子，护她百岁无忧。 “女士，我可以邀请你跳一支舞吗？” “你又在做奇怪的事情了。” “你今天好美。” “……” 爱是陪伴，是你在身边的每一天。","categories":[],"tags":[]},{"title":"利用Hexo和Github Pages搭建属于你自己的博客","slug":"利用Hexo和Github-Pages搭建属于你自己的博客","date":"2017-08-30T02:11:04.000Z","updated":"2019-08-30T12:14:29.956Z","comments":true,"path":"2017/08/30/利用Hexo和Github-Pages搭建属于你自己的博客/","link":"","permalink":"https://armincxh.github.com/2017/08/30/利用Hexo和Github-Pages搭建属于你自己的博客/","excerpt":"","text":"环境说明12系统：Ubuntu 16.04 LTS所需软件：Node.js、Git、Hexo 大致步骤 Node.js的安装 Git的安装和配置 Hexo的安装和配置 Github的配置 博客的部署 如何编辑和发布博客 挑选一个Hexo主题 Node.js的安装建议通过nvm(Node Version Manager)安装，nvm可以通过参照nvm文档进行安装，这里直接给出安装方法： using cURL: 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash using Wget： 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash nvm安装后，如果终端提示找不到nvm命令，请使用source命令： 1source ~/.bashrc 如果是zsh，请使用： 1source ~/.zshrc nvm安装完成后，运行 1nvm install stable 安装Node.js，然后运行 1node -v &amp;&amp; npm -v 检查是否成功安装了Node.js和npm。 Git的安装和配置运行 1sudo apt install git-core 即可安装git，然后对git进行简单配置： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 然后生成ssh密钥： 1ssh-keygen -t rsa 生成时它会让你选择密钥文件的存储位置以及让你设置密码，建议全部选择默认设置（全部直接回车下一步） 然后你的密钥就会存在~/.ssh这个文件夹里，里面应该有两个文件：id_rsa和id_rsa.pub，等会我们讲到Github Pages时会用到它们。 Hexo的安装和配置什么是Hexo？Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown或其他渲染引擎解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo的安装运行 1npm install hexo -g 安装hexo。运行 1hexo -v 检查是否hexo安装好了，安装完成后，新建一个文件夹初始化自己的博客： 1234cd ~mkdir Blogcd Bloghexo init 然后运行 1npm install npm会自动安装你需要的组件，等待它完成即可。 Hexo简单体验运行 12hexo ghexo s 然后点击终端中的链接 http://localhost:4000/ 来预览你所搭建的博客。 现在Hexo在本地的配置差不多结束了，接下来说明如何将Hexo和Github Pages联系起来，也就是让你的博客可以通过网络访问。 Github的配置什么是Github Pages？ Github Pages是Github提供给Github用户的一个静态页面，可以用来展示你个人、组织或项目的页面。 12GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. 当然，你可以利用它来搭建属于自己的博客。 如何创建属于我的Github Pages？官方提供了简单的教程 https://pages.github.com/ 如果你对Github有所了解，你可以按照官方的教程创建，当然，你也可以按照我下面说的做： 首先，注册一个Github账号，不多说，然后点击主页右方的： 然后会出现这个页面，yourname请替换为你的github用户名： 这个yourname.github.io就是你博客的域名，然后应该会出现： 这就意味着你成功创建了属于你的repository。 然后点击右上角Settings： 点击SSH and GPG keys，再点击New SSH key，进入如下页面： 在终端运行： 1cat ~/.ssh/id_rsa.pub 复制那一长串像乱码的东西，将他们粘贴到刚才的Add new页面，添加新的SSH key。 Github方面的配置已经差不多了。 博客的部署回到刚才你Hexo初始化的博客那里，教程里为~/Blog。 终端进入该文件夹，然后运行： 1npm install hexo-deployer-git --save 安装完成后，打开_config.yml文件，找到Deployment，按照如下进行修改，请将yourname替换为你的Github用户名： 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 保存文件，然后在终端运行： 12hexo ghexo deploy 就可以将你的博客部署到Github page上去了，稍等片刻，在浏览器中访问yourname.github.io就可以看到你的博客了。 如何编辑和发布博客进入你博客的本地文件夹，想新建一篇博客，运行： 1hexo new title 然后你就可以在/source/_posts下面找到你的博客文件，文件格式为Markdown，利用Markdown编辑博客即可。 博客编写完成后，进行博客的生成和部署： 12hexo ghexo d 然后稍等片刻，访问你的博客地址，你就可以看到你刚才写的博客了，当然你也可以在发布之前，运行： 1hexo s 在本地预览博客发布后的页面。 更多细节，请访问Hexo文档。 挑选一个Hexo主题想让你的博客变得更好看？你可以访问官方主题市场或者从github上获取主题.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://armincxh.github.com/tags/blog/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-30T00:56:25.000Z","updated":"2019-08-30T12:38:32.987Z","comments":true,"path":"2017/08/30/hello-world/","link":"","permalink":"https://armincxh.github.com/2017/08/30/hello-world/","excerpt":"","text":"你好世界。。。 12345System.out.println(&quot;Hello world!&quot;);alert(&apos;Hello world!&apos;);echo &quot;Hello world!&quot;","categories":[],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://armincxh.github.com/tags/Hello-World/"}]}]}